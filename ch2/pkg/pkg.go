package main

import "fmt"

// 包的初始化首先是解决包级变量的依赖顺序，然后按照包级变量声明出现的顺序依次初始化，每个包只会被初始化一次。

// 如果包中含有多个 .go 源文件，它们将按照发给编译器的顺序进行初始化
// Go 语言的构建工具首先会将 .go 文件根据文件名排序，然后依次调用编译器编译。

var a = b + c // a 第三个初始化，为 3
var b = f()   // b 第二个初始化，为 2，通过调用 f（依赖 c）
var c = 1     // c 第一个初始化，为 1

func f() int { return c + 1 }

// 对于在包级别声明的变量，如果有初始化表达式则用表达式初始化，没有初始化表达式的可以用一个特殊的 init 初始化函数来简化初始化工作。
// 每个文件都可以包含多个 init 初始化函数，在程序开始执行时按照它们声明的顺序被自动调用。
func init() {
	fmt.Println("init 1")
}
func init() {
	fmt.Println("init 2")
}

// 在 main 函数执行之前，所有依赖的包都已经完成初始化工作
func main() {
	fmt.Printf("a: %d, b: %d, c:%d\n", a, b, c)
}
